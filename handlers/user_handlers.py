import logging
import asyncio
import time
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db_operations import (
    register_user, register_confirmation, get_message_by_id,
    update_freebilet_status, get_all_code_phrases
)
from keyboards.user_keyboards import confirm_button, freebilet_check_keyboard, main_menu_keyboard

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    is_new, freebilet_confirmed = await register_user(user_id, username, first_name, last_name)
    
    # –ó–∞–ø—Ä–æ—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ @freebilet_bot
    if not freebilet_confirmed:
        welcome_text = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n"
            f"*–í–∞–∂–Ω–æ!* –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ @freebilet_bot. "
            f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–π—Ç–∏ –¥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: *\"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!\"*\n\n"
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ @freebilet_bot?"
        )
        
        await message.answer(
            welcome_text,
            parse_mode="Markdown",
            reply_markup=freebilet_check_keyboard()
        )
    else:
        await show_main_menu(message)

@router.callback_query(F.data == "freebilet_confirmed")
async def freebilet_confirm(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ freebilet"""
    await update_freebilet_status(callback.from_user.id, True)
    
    await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")
    await callback.message.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(callback.message)

@router.callback_query(F.data == "freebilet_not_confirmed")
async def freebilet_not_confirm(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ freebilet"""
    await callback.answer("–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –±–æ—Ç–∞ @freebilet_bot")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéü –ü–µ—Ä–µ–π—Ç–∏ –∫ @freebilet_bot", url="https://t.me/freebilet_bot")],
        [InlineKeyboardButton(text="‚úÖ –Ø —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="freebilet_confirmed")]
    ])
    
    await callback.message.edit_text(
        "üéü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É @freebilet_bot –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è *\"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!\"* "
        "–≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úÖ –Ø —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è\".",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

async def show_main_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    welcome_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        f"–ö–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ*, "
        f"—á—Ç–æ–±—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–Ω–∞–ª, —á—Ç–æ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.\n\n"
        f"–í —Ä–∞–∑–¥–µ–ª–µ \"üîë –ú–æ–∏ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã\" –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã."
    )
    
    await message.answer(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=main_menu_keyboard()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /codes - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã\n\n"
        "–ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "
        "—Å –∫–Ω–æ–ø–∫–æ–π *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ*. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, "
        "—á—Ç–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ö–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ \"üîë –ú–æ–∏ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã\" "
        "–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
    )
    
    await message.answer(
        help_text,
        parse_mode="Markdown"
    )

@router.message(Command("codes"))
@router.message(F.text == "üîë –ú–æ–∏ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã")
async def cmd_codes(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤—ã—Ö —Ñ—Ä–∞–∑"""
    code_phrases = await get_all_code_phrases()
    
    if not code_phrases:
        await message.answer(
            "üîí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–¥–æ–≤—ã—Ö —Ñ—Ä–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="Markdown"
        )
        return
    
    text = "üîë *–í–∞—à–∏ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã:*\n\n"
    
    for idx, phrase in enumerate(code_phrases, start=1):
        if phrase['status'] == 'active':
            text += f"{idx}. `{phrase['message_text']}`\n\n"
        elif phrase['status'] == 'outdated':
            text += f"{idx}. ~~`{phrase['message_text']}`~~ _(—É—Å—Ç–∞—Ä–µ–ª–æ)_\n\n"
    
    await message.answer(
        text,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("confirm:"))
async def confirm_message_receipt(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    confirmation_result = await register_confirmation(message_id, user_id)
    
    if confirmation_result:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message_info = await get_message_by_id(message_id)
        
        if message_info and message_info['is_code_phrase'] == 1:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞, –º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            unique_id = int(time.time())
            
            text = f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã! (#{unique_id})\n\n"
            
            if message_info['status'] == 'active':
                text += f"üîë *–ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞:* `{message_info['message_text']}`\n\n"
            elif message_info['status'] == 'outdated':
                text += f"üîë *–ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞:* ~~`{message_info['message_text']}`~~ _(—É—Å—Ç–∞—Ä–µ–ª–æ)_\n\n"
                
            text += "üìã –≠—Ç–∞ —Ñ—Ä–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üîë –ú–æ–∏ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã\"."
                
            await callback.message.edit_text(
                text,
                parse_mode="Markdown"
            )
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –º–µ—Ç–∫–æ–π
            unique_id = int(time.time())
            
            await callback.message.edit_text(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (#{unique_id}):\n\n"
                f"{message_info['message_text'] if message_info else '–°–æ–æ–±—â–µ–Ω–∏–µ'}"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        try:
            admin_id = message_info['sender_id'] if message_info else None
            if admin_id:
                first_name = callback.from_user.first_name
                last_name = callback.from_user.last_name or ""
                username = callback.from_user.username or "–ù–µ—Ç username"
                
                await callback.bot.send_message(
                    chat_id=admin_id,
                    text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} (@{username}) "
                         f"–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ "
                         f"{'–∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã' if message_info and message_info['is_code_phrase'] == 1 else '—Å–æ–æ–±—â–µ–Ω–∏—è'}!"
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.answer("‚úÖ –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def register_user_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.include_router(router)