import logging
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from config import ADMIN_ID
from database.db_operations import (
    get_all_users, save_broadcast_message, get_confirmations_for_message,
    get_unconfirmed_users, get_last_message, register_user, get_user_by_id,
    get_all_code_phrases, update_code_phrase_status, get_message_by_id
)
from keyboards.admin_keyboards import (
    admin_main_menu, admin_message_status, cancel_button, 
    user_info_buttons, code_phrase_status_buttons
)
from states.admin_states import AdminStates
from utils.notifications import send_message_to_users
from aiogram.exceptions import TelegramAPIError

router = Router()

@router.message(Command("admin"), F.from_user.id == ADMIN_ID)
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    await register_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        is_admin=1
    )
    
    await message.answer(
        "üéÆ *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_main_menu(),
        parse_mode="Markdown"
    )

@router.message(F.text == "üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", F.from_user.id == ADMIN_ID)
async def create_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=cancel_button()
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)

@router.message(F.text == "üîë –°–æ–∑–¥–∞—Ç—å –∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É", F.from_user.id == ADMIN_ID)
async def create_code_phrase(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã"""
    await message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
        "–≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –∫–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã\".",
        reply_markup=cancel_button()
    )
    await state.set_state(AdminStates.waiting_for_code_phrase)

@router.message(StateFilter(AdminStates.waiting_for_broadcast_message), F.from_user.id == ADMIN_ID)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    message_id = await save_broadcast_message(broadcast_text, message.from_user.id)
    
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    sent_count, failed_count = await send_message_to_users(message.bot, broadcast_text, message_id)
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"- –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}",
        reply_markup=admin_message_status(message_id)
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(StateFilter(AdminStates.waiting_for_code_phrase), F.from_user.id == ADMIN_ID)
async def process_code_phrase(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã"""
    code_phrase_text = message.text
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (is_code_phrase=1)
    message_id = await save_broadcast_message(code_phrase_text, message.from_user.id, is_code_phrase=1)
    
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    sent_count, failed_count = await send_message_to_users(message.bot, code_phrase_text, message_id)
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üîë –§—Ä–∞–∑–∞: `{code_phrase_text}`\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"- –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}",
        reply_markup=admin_message_status(message_id),
        parse_mode="Markdown"
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑–∞–º–∏", F.from_user.id == ADMIN_ID)
async def manage_code_phrases(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤—ã—Ö —Ñ—Ä–∞–∑ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    code_phrases = await get_all_code_phrases()
    
    if not code_phrases:
        await message.answer("‚ùå –ö–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return
    
    for phrase in code_phrases:
        status_text = ""
        if phrase['status'] == 'active':
            status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
        elif phrase['status'] == 'outdated':
            status_text = "üü† –£—Å—Ç–∞—Ä–µ–ª–∞"
        elif phrase['status'] == 'deleted':
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        
        text = (
            f"üîë *–ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ ID#{phrase['id']}*\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–¢–µ–∫—Å—Ç: `{phrase['message_text']}`\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
        await message.answer(
            text,
            reply_markup=code_phrase_status_buttons(phrase['id']),
            parse_mode="Markdown"
        )

@router.callback_query(F.data.startswith("code_active:"), F.from_user.id == ADMIN_ID)
async def set_code_active(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π"""
    phrase_id = int(callback.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_phrases = await get_all_code_phrases()
    current_phrase = next((p for p in all_phrases if p['id'] == phrase_id), None)
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if current_phrase and current_phrase['status'] == 'active':
        await callback.answer("‚úÖ –§—Ä–∞–∑–∞ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–ê–∫—Ç–∏–≤–Ω–∞'")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_code_phrase_status(phrase_id, "active")
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ê–∫—Ç–∏–≤–Ω–∞'")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = callback.message.text.replace("üü† –£—Å—Ç–∞—Ä–µ–ª–∞", "üü¢ –ê–∫—Ç–∏–≤–Ω–∞")
    await callback.message.edit_text(
        text,
        reply_markup=code_phrase_status_buttons(phrase_id),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("code_outdated:"), F.from_user.id == ADMIN_ID)
async def set_code_outdated(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤–æ–π —Ñ—Ä–∞–∑—ã –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π"""
    phrase_id = int(callback.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    all_phrases = await get_all_code_phrases()
    current_phrase = next((p for p in all_phrases if p['id'] == phrase_id), None)
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if current_phrase and current_phrase['status'] == 'outdated':
        await callback.answer("üü† –§—Ä–∞–∑–∞ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–£—Å—Ç–∞—Ä–µ–ª–∞'")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_code_phrase_status(phrase_id, "outdated")
    await callback.answer("üü† –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–£—Å—Ç–∞—Ä–µ–ª–∞'")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = callback.message.text.replace("üü¢ –ê–∫—Ç–∏–≤–Ω–∞", "üü† –£—Å—Ç–∞—Ä–µ–ª–∞")
    await callback.message.edit_text(
        text,
        reply_markup=code_phrase_status_buttons(phrase_id),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("code_delete:"), F.from_user.id == ADMIN_ID)
async def delete_code_phrase(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–¥–æ–≤—É—é —Ñ—Ä–∞–∑—É"""
    phrase_id = int(callback.data.split(":")[1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 'deleted'
    await update_code_phrase_status(phrase_id, "deleted")
    
    await callback.answer("üóëÔ∏è –§—Ä–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ—Ä–∞–∑–µ
    await callback.message.delete()

@router.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", F.from_user.id == ADMIN_ID)
async def list_users(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    users = await get_all_users()
    
    if not users:
        await message.answer("üòî –£ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    text = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞* ({len(users)})\n\n"
    
    for idx, user in enumerate(users, start=1):
        username = user['username'] if user['username'] else '–ù–µ—Ç username'
        name = f"{user['first_name']} {user['last_name'] or ''}".strip()
        freebilet = "‚úÖ" if user['freebilet_confirmed'] else "‚ùå"
        
        text += f"{idx}. {name} (@{username}) - ID: `{user['user_id']}` | Freebilet: {freebilet}\n"
        
        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è,
        # –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±–æ–ª—å—à–æ–π
        if idx % 50 == 0 and idx < len(users):
            await message.answer(text, parse_mode="Markdown")
            text = ""
    
    if text:
        await message.answer(text, parse_mode="Markdown")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏", F.from_user.id == ADMIN_ID)
async def last_broadcast_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    last_message = await get_last_message()
    
    if not last_message:
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ.")
        return
    
    confirmations = await get_confirmations_for_message(last_message['id'])
    unconfirmed = await get_unconfirmed_users(last_message['id'])
    
    all_users = len(confirmations) + len(unconfirmed)
    
    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
    )
    
    if last_message['is_code_phrase'] == 1:
        text += f"üîë –ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: `{last_message['message_text'][:100]}`...\n\n"
    else:
        text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {last_message['message_text'][:100]}...\n\n"
    
    text += (
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏: {len(confirmations)} –∏–∑ {all_users} ({int(len(confirmations)/all_users*100 if all_users else 0)}%)\n"
        f"‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏: {len(unconfirmed)} –∏–∑ {all_users} ({int(len(unconfirmed)/all_users*100 if all_users else 0)}%)\n"
    )
    
    await message.answer(
        text,
        reply_markup=admin_message_status(last_message['id']),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("confirmed_list:"), F.from_user.id == ADMIN_ID)
async def show_confirmed_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.answer()
    
    message_id = int(callback.data.split(":")[1])
    confirmations = await get_confirmations_for_message(message_id)
    
    if not confirmations:
        await callback.message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    text = f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–µ –ø–æ–ª—É—á–µ–Ω–∏–µ* ({len(confirmations)})\n\n"
    
    for idx, conf in enumerate(confirmations, start=1):
        username = conf['username'] if conf['username'] else '–ù–µ—Ç username'
        name = f"{conf['first_name']} {conf['last_name'] or ''}".strip()
        
        text += f"{idx}. {name} (@{username}) - ID: `{conf['user_id']}`\n"
        
        if idx % 50 == 0 and idx < len(confirmations):
            await callback.message.answer(text, parse_mode="Markdown")
            text = ""
    
    if text:
        await callback.message.answer(text, parse_mode="Markdown")

@router.callback_query(F.data.startswith("unconfirmed_list:"), F.from_user.id == ADMIN_ID)
async def show_unconfirmed_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.answer()
    
    message_id = int(callback.data.split(":")[1])
    unconfirmed = await get_unconfirmed_users(message_id)
    
    if not unconfirmed:
        await callback.message.answer("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        return
    
    text = f"‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏–µ –ø–æ–ª—É—á–µ–Ω–∏–µ* ({len(unconfirmed)})\n\n"
    
    for idx, user in enumerate(unconfirmed, start=1):
        username = user['username'] if user['username'] else '–ù–µ—Ç username'
        name = f"{user['first_name']} {user['last_name'] or ''}".strip()
        
        text += f"{idx}. {name} (@{username}) - ID: `{user['user_id']}`\n"
        
        if idx % 50 == 0 and idx < len(unconfirmed):
            await callback.message.answer(text, parse_mode="Markdown")
            text = ""
    
    if text:
        await callback.message.answer(text, parse_mode="Markdown")

@router.callback_query(F.data.startswith("update_status:"), F.from_user.id == ADMIN_ID)
async def update_message_status(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.answer("–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å...")
    
    message_id = int(callback.data.split(":")[1])
    message_info = await get_message_by_id(message_id)
    confirmations = await get_confirmations_for_message(message_id)
    unconfirmed = await get_unconfirmed_users(message_id)
    
    all_users = len(confirmations) + len(unconfirmed)
    confirmation_percent = int(len(confirmations)/all_users*100 if all_users else 0)
    unconfirmed_percent = int(len(unconfirmed)/all_users*100 if all_users else 0)
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è—è –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    import time
    unique_id = int(time.time())
    
    text = (
        f"üìä *–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏* (–æ–±–Ω. {unique_id})\n\n"
    )
    
    if message_info and message_info['is_code_phrase'] == 1:
        text += f"üîë –ö–æ–¥–æ–≤–∞—è —Ñ—Ä–∞–∑–∞: `{message_info['message_text'][:100]}`...\n\n"
    else:
        text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message_info['message_text'][:100] if message_info else ''}...\n\n"
    
    text += (
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏: {len(confirmations)} –∏–∑ {all_users} ({confirmation_percent}%)\n"
        f"‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏: {len(unconfirmed)} –∏–∑ {all_users} ({unconfirmed_percent}%)\n"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=admin_message_status(message_id),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "cancel", F.from_user.id == ADMIN_ID)
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    
    if current_state is not None:
        await state.clear()
    
    await callback.message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=admin_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("message_user:"), F.from_user.id == ADMIN_ID)
async def message_user(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = int(callback.data.split(":")[1])
    user = await get_user_by_id(user_id)
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await callback.answer(f"–§—É–Ω–∫—Ü–∏—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

def register_admin_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    dp.include_router(router)